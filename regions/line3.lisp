(in-package :rtg-math.regions.line3)

(defstruct line3
  (origin (v! 0 0 0) :type vec3)
  (direction (v! 1 1 1) :type vec3))

(declaim (ftype (function (line3) vec3) origin)
         (inline origin))
(defun origin (line3)
  (declare (optimize speed))
  (line3-origin line3))

(declaim (ftype (function (line3) vec3) direction)
         (inline direction))
(defun direction (line3)
  (declare (optimize speed))
  (line3-origin line3))

(defun make (origin-v3 direction-v3)
  (make-line3 :origin origin-v3
              :direction (v3:normalize direction-v3)))

(defun transform-m3 (matrix3 line3)
  (make-line3 :origin (m3:*v matrix3 (line3-origin line3))
              :direction (m3:*v matrix3 (line3-direction line3))))

(defun transform-q (quaternion line3)
  (transform-m3 (q:to-mat3 quaternion)
                line3))

(declaim (inline =))
(defun = (line3-a line3-b)
  (and (v3:= (origin line3-a) (origin line3-b))
       (v3:= (direction line3-a) (direction line3-b))))

(defun /= (line3-a line3-b)
  (declare (inline =))
  (not (= line3-a line3-b)))

(declaim (ftype (function (line3 vec3) vec3) closest-point))
(defun closest-point (line3 point-v3)
  (declare (line3 line3) (vec3 point-v3) (optimize speed))
  (let* ((dir (line3-direction line3))
         (w (v3:- point-v3 (line3-origin line3)))
         (vsq (v3:dot dir dir))
         (proj (v3:dot w dir)))
    (v3:+ (line3-origin line3)
          (v3:*s dir (/ proj vsq)))))


(declaim (ftype (function (line3 line3) (values vec3 vec3))
                closest-line-points))
(defun closest-line-points (line3-a line3-b)
  (declare (line3 line3-a line3-b) (optimize speed))
  (let* ((w0 (v3:- (line3-origin line3-a)
                   (line3-origin line3-b)))
         (a (v3:dot (line3-direction line3-a)
                    (line3-direction line3-a)))
         (b (v3:dot (line3-direction line3-a)
                    (line3-direction line3-b)))
         (c (v3:dot (line3-direction line3-b)
                    (line3-direction line3-b)))
         (d (v3:dot (line3-direction line3-a)
                    w0))
         (e (v3:dot (line3-direction line3-b)
                    w0))
         (denom (- (* a c) (* b b))))
    (if (sfzero-p denom)
        (let ((p0 (line3-origin line3-a))
              (p1 (v3:+ (line3-origin line3-b)
                        (v3:*s (line3-direction line3-b) (/ e c)))))
          (values p0 p1))
        (let ((p0 (v3:+ (line3-origin line3-a)
                        (v3:*s (line3-direction line3-a)
                               (/ (- (* b e) (* c d))
                                     denom))))
              (p1 (v3:+ (line3-origin line3-b)
                        (v3:*s (line3-direction line3-b)
                               (/ (- (* a e) (* b d))
                                     denom)))))
          (values p0 p1)))))


(declaim (ftype (function (line3 vec3) (values single-float single-float))
                distance-squared-to-point))
(defun distance-squared-to-point (line3 point-v3)
  (declare (line3 line3) (vec3 point-v3) (optimize speed))
  (let* ((dir (line3-direction line3))
         (w (v3:- point-v3 (line3-origin line3)))
         (vsq (v3:dot dir dir))
         (proj (v3:dot w dir)))
    (let ((t-c (/ proj vsq)))
      (values (- (v3:dot w w) (* t-c proj))
              t-c))))


(declaim (ftype (function (line3 vec3) (values single-float single-float))
                distance-to-point))
(defun distance-to-point (line3 point-v3)
  (declare (line3 line3) (vec3 point-v3) (optimize speed))
  (multiple-value-bind (val t-c)
      (distance-squared-to-point line3 point-v3)
    (declare ((single-float 0s0 #.most-positive-single-float) val))
    (values (sqrt val) t-c)))


(declaim (ftype (function (line3 line3)
                          (values single-float single-float single-float))
                distance-squared-to-line3))
(defun distance-squared-to-line3 (line3-a line3-b)
  (declare (line3 line3-a line3-b) (optimize speed))
  (let* ((dir-a (line3-direction line3-a))
         (dir-b (line3-direction line3-b))
         (origin-a (line3-origin line3-a))
         (origin-b (line3-origin line3-b))
         (w0 (v3:- origin-a origin-b))
         (a (v3:dot dir-a dir-a))
         (b (v3:dot dir-a dir-b))
         (c (v3:dot dir-b dir-b))
         (d (v3:dot dir-a w0))
         (e (v3:dot dir-b w0))
         (denom (- (* a c) (* b b))))
    (if (sfzero-p denom)
        (let* ((s-c 0s0)
               (t-c (/ e c))
               (wc (v3:- w0 (v3:*s dir-b t-c))))
          (values (v3:dot wc wc) t-c s-c))
        (let* ((s-c (/ (- (* b e) (* c d)) denom))
               (t-c (/ (- (* a e) (* b d)) denom))
               (wc (v3:+ w0 (v3:- (v3:*s dir-a s-c) (v3:*s dir-b t-c)))))
          (values (v3:dot wc wc) t-c s-c)))))


(declaim (ftype (function (line3 line3)
                          (values single-float single-float single-float))
                distance-to-line3))
(defun distance-to-line3 (line3-a line3-b)
  (declare (line3 line3-a line3-b) (optimize speed))
  (multiple-value-bind (val t-c s-c)
      (distance-squared-to-line3 line3-a line3-b)
    (declare ((single-float 0s0 #.most-positive-single-float) val))
    (values (sqrt val) t-c s-c)))
